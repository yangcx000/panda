!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALIGN_SIZE	lib/memory.h	/^    ALIGN_SIZE = 8,$/;"	e	enum:__anon1
ARENA_H	lib/arena.h	2;"	d
ARRAY_SIZE	include/util.h	23;"	d
Allocate	lib/arena.cc	/^char* Arena::Allocate(int bytes) {$/;"	f	class:Ucloud::Arena
Allocate	lib/memory.cc	/^void MemAllocator::Allocate(size_t block_size) {$/;"	f	class:MemAllocator
AllocateFallback	lib/arena.cc	/^char* Arena::AllocateFallback(int bytes) {$/;"	f	class:Ucloud::Arena
Arena	lib/arena.cc	/^Arena::Arena()$/;"	f	class:Ucloud::Arena
Arena	lib/arena.h	/^class Arena {$/;"	c	namespace:Ucloud
BLOCK_SIZE	include/util.h	21;"	d
CHUNK_SIZE	lib/memory.h	/^    CHUNK_SIZE = 128$/;"	e	enum:__anon1
CLEAR_SCREEN	include/util.h	520;"	d
CONFIG_H	include/config.h	2;"	d
CONNECTION_BACKLOG	server/panda.h	14;"	d
CXX	client/Makefile	/^CXX=g++$/;"	m
CXX	server/Makefile	/^CXX=g++$/;"	m
CXXFLAGS	client/Makefile	/^CXXFLAGS= -g -Wall -O2 -std=c++0x$/;"	m
CXXFLAGS	server/Makefile	/^CXXFLAGS= -g -Wall -O2 -std=c++0x$/;"	m
Config	include/config.h	/^class Config {$/;"	c
Config	server/config.cpp	/^Config::Config(const char* config_path) {$/;"	f	class:Config
Construct	lib/memory.cc	/^void MemAllocator::Construct() {$/;"	f	class:MemAllocator
DEPS	server/Makefile	/^DEPS= panda.h$/;"	m
ECHOSERVER_THREADED_H	server/panda.h	2;"	d
ERR_PTR	include/util.h	/^static inline void * __must_check ERR_PTR(long error)$/;"	f
EXEC	client/Makefile	/^EXEC=panda_client$/;"	m
EXEC	server/Makefile	/^EXEC=panda$/;"	m
Get	lib/INIReader.cpp	/^string INIReader::Get(string section, string name, string default_value)$/;"	f	class:INIReader
GetBoolean	lib/INIReader.cpp	/^bool INIReader::GetBoolean(string section, string name, bool default_value)$/;"	f	class:INIReader
GetFields	lib/INIReader.cpp	/^std::set<std::string> INIReader::GetFields(std::string section) const$/;"	f	class:INIReader
GetInteger	lib/INIReader.cpp	/^long INIReader::GetInteger(string section, string name, long default_value)$/;"	f	class:INIReader
GetReal	lib/INIReader.cpp	/^double INIReader::GetReal(string section, string name, double default_value)$/;"	f	class:INIReader
GetSections	lib/INIReader.cpp	/^std::set<std::string> INIReader::GetSections() const$/;"	f	class:INIReader
HLIST_HEAD	include/list.h	166;"	d
HLIST_HEAD_INIT	include/list.h	165;"	d
INIReader	include/INIReader.h	/^class INIReader$/;"	c
INIReader	lib/INIReader.cpp	/^INIReader::INIReader(string filename)$/;"	f	class:INIReader
INIT_HLIST_HEAD	include/list.h	167;"	d
INIT_HLIST_NODE	include/list.h	/^static inline void INIT_HLIST_NODE(struct hlist_node *h)$/;"	f
INIT_LIST_HEAD	include/list.h	/^static inline void INIT_LIST_HEAD(struct list_head *list)$/;"	f
INIT_LIST_NODE	include/list.h	/^static inline void INIT_LIST_NODE(struct list_node *list)$/;"	f
IS_ERR	include/util.h	/^static inline long __must_check IS_ERR(const void *ptr)$/;"	f
IS_ERR_OR_NULL	include/util.h	/^static inline long __must_check IS_ERR_OR_NULL(const void *ptr)$/;"	f
IS_ERR_VALUE	include/util.h	544;"	d
LIBS	client/Makefile	/^LIBS= -levent$/;"	m
LIBS	server/Makefile	/^LIBS= -levent$/;"	m
LIST_HEAD	include/list.h	20;"	d
LIST_HEAD_INIT	include/list.h	17;"	d
LIST_NODE	include/list.h	22;"	d
LIST_NODE_INIT	include/list.h	18;"	d
LIST_POISON1	include/list.h	154;"	d
LIST_POISON2	include/list.h	155;"	d
LOCAL	include/util.h	34;"	d
LOGGER_H	include/logger.h	2;"	d
LOG_DST_DEFAULT	include/logger.h	/^	LOG_DST_DEFAULT,$/;"	e	enum:log_dst_type
LOG_DST_STDOUT	include/logger.h	/^	LOG_DST_STDOUT,$/;"	e	enum:log_dst_type
LOG_DST_SYSLOG	include/logger.h	/^	LOG_DST_SYSLOG,$/;"	e	enum:log_dst_type
LOG_SPACE_DEBUG_SIZE	include/logger.h	8;"	d
LOG_SPACE_SIZE	include/logger.h	7;"	d
MAX_ERRNO	include/util.h	542;"	d
MAX_EVENTS	test/aio_test.cpp	9;"	d	file:
MAX_MSG_SIZE	include/logger.h	9;"	d
MAX_THREAD_NAME_LEN	include/logger.h	10;"	d
MEMORY_H	lib/memory.h	2;"	d
MakeKey	lib/INIReader.cpp	/^string INIReader::MakeKey(string section, string name)$/;"	f	class:INIReader
MemAllocator	lib/memory.cc	/^MemAllocator::MemAllocator()$/;"	f	class:MemAllocator
MemAllocator	lib/memory.h	/^class MemAllocator {$/;"	c
MemEntry	lib/memory.h	/^union MemEntry {$/;"	u
NUM_THREADS	server/panda.h	19;"	d
NewBlock	lib/arena.cc	/^char* Arena::NewBlock(int size) {$/;"	f	class:Ucloud::Arena
OBJS	client/Makefile	/^OBJS=$(SOURCES:.cpp=.o)$/;"	m
OBJS	server/Makefile	/^OBJS=$(SOURCES:.cpp=.o)$/;"	m
PANDA_ALERT	include/logger.h	30;"	d
PANDA_CLIENT_H	client/panda_client.h	2;"	d
PANDA_CRIT	include/logger.h	31;"	d
PANDA_DEBUG	include/logger.h	36;"	d
PANDA_EMERG	include/logger.h	29;"	d
PANDA_ERR	include/logger.h	32;"	d
PANDA_INFO	include/logger.h	35;"	d
PANDA_NOTICE	include/logger.h	34;"	d
PANDA_WARNING	include/logger.h	33;"	d
PTR_ERR	include/util.h	/^static inline long __must_check PTR_ERR(const void *ptr)$/;"	f
ParseConfig	server/config.cpp	/^int Config::ParseConfig() {$/;"	f	class:Config
ParseError	lib/INIReader.cpp	/^int INIReader::ParseError()$/;"	f	class:INIReader
RESET_CURSOR	include/util.h	521;"	d
SD_COND_INITIALIZER	include/util.h	377;"	d
SD_MUTEX_INITIALIZER	include/util.h	302;"	d
SD_RW_LOCK_INITIALIZER	include/util.h	434;"	d
SECTOR_SIZE	include/util.h	20;"	d
SERVER_ADDR	server/panda.h	12;"	d
SERVER_PORT	server/panda.h	11;"	d
SOCKET_READ_TIMEOUT_SECONDS	server/panda.h	16;"	d
SOCKET_WRITE_TIMEOUT_SECONDS	server/panda.h	17;"	d
SOURCES	client/Makefile	/^SOURCES=$(wildcard *.cpp)$/;"	m
SOURCES	server/Makefile	/^SOURCES=$(wildcard *.cpp)$/;"	m
SWAP	include/util.h	234;"	d
TEXT_BLUE	include/util.h	513;"	d
TEXT_BOLD	include/util.h	506;"	d
TEXT_BOLD_BLUE	include/util.h	514;"	d
TEXT_BOLD_CYAN	include/util.h	518;"	d
TEXT_BOLD_GREEN	include/util.h	510;"	d
TEXT_BOLD_MAGENTA	include/util.h	516;"	d
TEXT_BOLD_RED	include/util.h	508;"	d
TEXT_BOLD_YELLOW	include/util.h	512;"	d
TEXT_CYAN	include/util.h	517;"	d
TEXT_GREEN	include/util.h	509;"	d
TEXT_MAGENTA	include/util.h	515;"	d
TEXT_NORMAL	include/util.h	505;"	d
TEXT_RED	include/util.h	507;"	d
TEXT_YELLOW	include/util.h	511;"	d
TID_MAX_DEFAULT	lib/work.cpp	80;"	d	file:
TRACEPOINT_DEFINE	lib/work.cpp	37;"	d	file:
TestStruct	test/structure_packed_test.cpp	/^struct TestStruct {$/;"	s	file:
Ucloud	lib/arena.cc	/^namespace Ucloud {$/;"	n	file:
Ucloud	lib/arena.h	/^namespace Ucloud {$/;"	n
ValueHandler	lib/INIReader.cpp	/^int INIReader::ValueHandler(void* user, const char* section, const char* name,$/;"	f	class:INIReader
WQ_DYNAMIC	include/work.h	/^	WQ_DYNAMIC, \/* # of threads proportional to nr_nodes created *\/$/;"	e	enum:wq_thread_control
WQ_ORDERED	include/work.h	/^	WQ_ORDERED, \/* Only 1 thread created for work queue *\/$/;"	e	enum:wq_thread_control
WQ_PROTECTION_PERIOD	lib/work.cpp	45;"	d	file:
WQ_UNLIMITED	include/work.h	/^	WQ_UNLIMITED, \/* Unlimited # of threads created *\/$/;"	e	enum:wq_thread_control
_LOCAL	include/util.h	33;"	d
__INIREADER_H__	include/INIReader.h	9;"	d
__LIST_H__	include/list.h	2;"	d
__LOCAL	include/util.h	32;"	d
__UTIL_H__	include/util.h	2;"	d
__WORK_H__	include/work.h	2;"	d
__be16_to_cpu	include/util.h	43;"	d
__be16_to_cpu	include/util.h	51;"	d
__be32_to_cpu	include/util.h	44;"	d
__be32_to_cpu	include/util.h	52;"	d
__be64_to_cpu	include/util.h	45;"	d
__be64_to_cpu	include/util.h	53;"	d
__cpu_to_be16	include/util.h	40;"	d
__cpu_to_be16	include/util.h	48;"	d
__cpu_to_be32	include/util.h	41;"	d
__cpu_to_be32	include/util.h	49;"	d
__cpu_to_be64	include/util.h	42;"	d
__cpu_to_be64	include/util.h	50;"	d
__cpu_to_le32	include/util.h	46;"	d
__cpu_to_le32	include/util.h	54;"	d
__hlist_del	include/list.h	/^static inline void __hlist_del(struct hlist_node *n)$/;"	f
__list_add	include/list.h	/^static inline void __list_add(struct list_node *new,$/;"	f
__list_del	include/list.h	/^static inline void __list_del(struct list_node *prev, struct list_node *next)$/;"	f
__list_del_entry	include/list.h	/^static inline void __list_del_entry(struct list_node *entry)$/;"	f
__list_splice	include/list.h	/^static inline void __list_splice(const struct list_head *list,$/;"	f
__must_check	include/util.h	30;"	d
__sd_thread_create	lib/work.cpp	/^static int __sd_thread_create(const char *name, sd_thread_t *thread,$/;"	f	file:
_error	include/INIReader.h	/^    int _error;$/;"	m	class:INIReader
_fields	include/INIReader.h	/^    std::map<std::string, std::set<std::string>*> _fields;$/;"	m	class:INIReader
_sections	include/INIReader.h	/^    std::set<std::string> _sections;$/;"	m	class:INIReader
_values	include/INIReader.h	/^    std::map<std::string, std::string> _values;$/;"	m	class:INIReader
ack_efd	lib/work.cpp	/^static int ack_efd;$/;"	v	file:
after	include/util.h	/^static inline int after(uint32_t seq1, uint32_t seq2)$/;"	f
arg	lib/work.cpp	/^	void *arg;$/;"	m	struct:thread_args	file:
before	include/util.h	/^static inline int before(uint32_t seq1, uint32_t seq2)$/;"	f
clear_screen	include/util.h	/^static inline void clear_screen(void)$/;"	f
clock_get_time	include/util.h	/^static inline uint64_t clock_get_time(void)$/;"	f
cond	include/util.h	/^	pthread_cond_t cond;$/;"	m	struct:sd_cond
container_of	include/util.h	25;"	d
create_listen_ports	server/panda.cpp	/^int create_listen_ports(Config* config) {$/;"	f
create_ordered_work_queue	lib/work.cpp	/^struct work_queue *create_ordered_work_queue(const char *name)$/;"	f
create_work_queue	lib/work.cpp	/^struct work_queue *create_work_queue(const char *name,$/;"	f
create_worker_threads	lib/work.cpp	/^static int create_worker_threads(struct wq_info *wi, size_t nr_threads)$/;"	f	file:
data	lib/memory.h	/^    char data[1]; $/;"	m	union:MemEntry
dolog	lib/logger.cpp	/^void dolog(int prio, const char *func, int line, const char *fmt, va_list ap)$/;"	f
done	include/work.h	/^	work_func_t done;$/;"	m	struct:work
efd	lib/work.cpp	/^static int efd;$/;"	v	file:
evbase	server/panda.cpp	/^static struct event_base* evbase;$/;"	v	typeref:struct:event_base	file:
event_cb	client/panda_client.cpp	/^void event_cb(struct bufferevent* bev, short events, void* ctx) {$/;"	f
event_cb	server/panda.cpp	/^void event_cb(struct bufferevent *bev, short events, void *ctx) {$/;"	f
finished_list	lib/work.cpp	/^	struct list_head finished_list;$/;"	m	struct:wq_info	typeref:struct:wq_info::list_head	file:
finished_lock	lib/work.cpp	/^	struct sd_mutex finished_lock;$/;"	m	struct:wq_info	typeref:struct:wq_info::sd_mutex	file:
first	include/list.h	/^	struct hlist_node *first;$/;"	m	struct:hlist_head	typeref:struct:hlist_head::hlist_node
fn	include/work.h	/^	work_func_t fn;$/;"	m	struct:work
get_msec_time	lib/work.cpp	/^static uint64_t get_msec_time(void)$/;"	f	file:
hlist_add_after	include/list.h	/^static inline void hlist_add_after(struct hlist_node *n,$/;"	f
hlist_add_before	include/list.h	/^static inline void hlist_add_before(struct hlist_node *n,$/;"	f
hlist_add_head	include/list.h	/^static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h)$/;"	f
hlist_del	include/list.h	/^static inline void hlist_del(struct hlist_node *n)$/;"	f
hlist_empty	include/list.h	/^static inline bool hlist_empty(const struct hlist_head *h)$/;"	f
hlist_entry	include/list.h	231;"	d
hlist_for_each	include/list.h	233;"	d
hlist_for_each_entry	include/list.h	245;"	d
hlist_head	include/list.h	/^struct hlist_head {$/;"	s
hlist_node	include/list.h	/^struct hlist_node {$/;"	s
hlist_unhashed	include/list.h	/^static inline bool hlist_unhashed(const struct hlist_node *h)$/;"	f
init_work_queue	lib/work.cpp	/^int init_work_queue(size_t (*get_nr_nodes)(void))$/;"	f
intcmp	include/util.h	111;"	d
ip	include/config.h	/^        std::string ip() {$/;"	f	class:Config
is_main_thread	include/work.h	/^static inline bool is_main_thread(void)$/;"	f
is_stdin_console	include/util.h	/^static inline bool is_stdin_console(void)$/;"	f
is_stdout_console	include/util.h	/^static inline bool is_stdout_console(void)$/;"	f
is_worker_thread	include/work.h	/^static inline bool is_worker_thread(void)$/;"	f
kBlockSize	lib/arena.cc	/^static int kBlockSize = 4096;$/;"	m	namespace:Ucloud	file:
killServer	server/panda.cpp	/^void killServer(void) {$/;"	f
likely	include/util.h	28;"	d
list	lib/work.cpp	/^	struct list_node list;$/;"	m	struct:wq_info	typeref:struct:wq_info::list_node	file:
list_add	include/list.h	/^static inline void list_add(struct list_node *new, struct list_head *head)$/;"	f
list_add_tail	include/list.h	/^static inline void list_add_tail(struct list_node *new, struct list_head *head)$/;"	f
list_del	include/list.h	/^static inline void list_del(struct list_node *entry)$/;"	f
list_empty	include/list.h	/^static inline bool list_empty(const struct list_head *head)$/;"	f
list_entry	include/list.h	50;"	d
list_first_entry	include/list.h	37;"	d
list_for_each	include/list.h	53;"	d
list_for_each_entry	include/list.h	58;"	d
list_head	include/list.h	/^struct list_head {$/;"	s
list_linked	include/list.h	/^static inline bool list_linked(const struct list_node *node)$/;"	f
list_move	include/list.h	/^static inline void list_move(struct list_node *list, struct list_head *head)$/;"	f
list_move_tail	include/list.h	/^static inline void list_move_tail(struct list_node *list,$/;"	f
list_node	include/list.h	/^struct list_node {$/;"	s
list_splice_init	include/list.h	/^static inline void list_splice_init(struct list_head *list,$/;"	f
list_splice_tail_init	include/list.h	/^static inline void list_splice_tail_init(struct list_head *list,$/;"	f
listen_cb	server/panda.cpp	/^void listen_cb(struct evconnlistener* listener, evutil_socket_t fd,$/;"	f
listen_error_cb	server/panda.cpp	/^static void listen_error_cb(struct evconnlistener *listener, void *ctx)$/;"	f	file:
log	server/panda.h	21;"	d
log_dst_type	include/logger.h	/^enum log_dst_type {$/;"	g
log_write	lib/logger.cpp	/^void log_write(int prio, const char *func, int line, const char *fmt, ...)$/;"	f
loglevel_str2num	include/logger.h	/^static inline int loglevel_str2num(const char *str)$/;"	f
m1	test/structure_packed_test.cpp	/^    char m1;$/;"	m	struct:TestStruct	file:
m2	test/structure_packed_test.cpp	/^    int m2;$/;"	m	struct:TestStruct	file:
m_allocated	lib/arena.h	/^	uint64_t m_allocated;$/;"	m	class:Ucloud::Arena
m_arena	lib/memory.h	/^        MemEntry** m_arena;$/;"	m	class:MemAllocator
m_blocks	lib/arena.h	/^	std::vector<char*> m_blocks;$/;"	m	class:Ucloud::Arena
m_current	lib/arena.h	/^	char* m_current;	$/;"	m	class:Ucloud::Arena
m_ip	include/config.h	/^        std::string      m_ip;$/;"	m	class:Config
m_next	lib/memory.h	/^    union MemEntry* m_next;$/;"	m	union:MemEntry	typeref:union:MemEntry::MemEntry
m_port	include/config.h	/^        unsigned short   m_port;$/;"	m	class:Config
m_reader	include/config.h	/^        INIReader* m_reader;$/;"	m	class:Config
m_remaining	lib/arena.h	/^	uint64_t m_remaining;$/;"	m	class:Ucloud::Arena
main	client/panda_client.cpp	/^int main(void) {$/;"	f
main	lib/test_arena.cc	/^int main() {$/;"	f
main	server/panda.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	test/aio_test.cpp	/^int main(void) {$/;"	f
main	test/structure_packed_test.cpp	/^int main() {$/;"	f
main_thread	include/work.h	45;"	d
main_thread_get	include/work.h	46;"	d
main_thread_set	include/work.h	51;"	d
max	include/util.h	94;"	d
min	include/util.h	88;"	d
mutex	include/util.h	/^	pthread_mutex_t mutex;$/;"	m	struct:sd_mutex
n	include/list.h	/^	struct list_node n;$/;"	m	struct:list_head	typeref:struct:list_head::list_node
name	lib/work.cpp	/^	const char *name;$/;"	m	struct:thread_args	file:
name	lib/work.cpp	/^	const char *name;$/;"	m	struct:wq_info	file:
nbsearch	include/util.h	179;"	d
next	include/list.h	/^	struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::hlist_node
next	include/list.h	/^	struct list_node *next;$/;"	m	struct:list_node	typeref:struct:list_node::list_node
nr_nodes	lib/work.cpp	/^static size_t nr_nodes = 1;$/;"	v	file:
nr_queued_work	lib/work.cpp	/^	size_t nr_queued_work;$/;"	m	struct:wq_info	file:
nr_threads	lib/work.cpp	/^	size_t nr_threads;$/;"	m	struct:wq_info	file:
panda_alert	include/logger.h	40;"	d
panda_crit	include/logger.h	42;"	d
panda_debug	include/logger.h	57;"	d
panda_emerg	include/logger.h	38;"	d
panda_err	include/logger.h	44;"	d
panda_info	include/logger.h	50;"	d
panda_notice	include/logger.h	48;"	d
panda_warn	include/logger.h	46;"	d
panic	include/util.h	62;"	d
panic	include/util.h	70;"	d
pending_cond	lib/work.cpp	/^	struct sd_cond pending_cond;$/;"	m	struct:wq_info	typeref:struct:wq_info::sd_cond	file:
pending_list	include/work.h	/^	struct list_head pending_list;$/;"	m	struct:work_queue	typeref:struct:work_queue::list_head
pending_lock	lib/work.cpp	/^	struct sd_mutex pending_lock;$/;"	m	struct:wq_info	typeref:struct:wq_info::sd_mutex	file:
port	include/config.h	/^        unsigned short port() {$/;"	f	class:Config
pprev	include/list.h	/^	struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::
prev	include/list.h	/^	struct list_node *prev;$/;"	m	struct:list_node	typeref:struct:list_node::list_node
program_name	server/panda.cpp	/^static const std::string program_name = "panda";$/;"	v	file:
q	lib/work.cpp	/^	struct work_queue q;$/;"	m	struct:wq_info	typeref:struct:wq_info::work_queue	file:
queue_work	lib/work.cpp	/^void queue_work(struct work_queue *q, struct work *work)$/;"	f
read_cb	client/panda_client.cpp	/^void read_cb(struct bufferevent* bev, void* ctx) {$/;"	f
read_cb	server/panda.cpp	/^void read_cb(struct bufferevent *bev, void *ctx) {$/;"	f
refcnt_t	include/util.h	/^} refcnt_t;$/;"	t	typeref:struct:__anon3
refcount_dec	include/util.h	/^static inline int refcount_dec(refcnt_t *rc)$/;"	f
refcount_inc	include/util.h	/^static inline int refcount_inc(refcnt_t *rc)$/;"	f
refcount_read	include/util.h	/^static inline int refcount_read(refcnt_t *rc)$/;"	f
refcount_set	include/util.h	/^static inline void refcount_set(refcnt_t *rc, int val)$/;"	f
resume_efd	lib/work.cpp	/^static int resume_efd;$/;"	v	file:
resume_worker_threads	lib/work.cpp	/^void resume_worker_threads(void)$/;"	f
round_down	include/util.h	37;"	d
round_up	include/util.h	36;"	d
rwlock	include/util.h	/^	pthread_rwlock_t rwlock;$/;"	m	struct:sd_rw_lock
sd_cond	include/util.h	/^struct sd_cond {$/;"	s
sd_cond_broadcast	include/util.h	/^static inline int sd_cond_broadcast(struct sd_cond *cond)$/;"	f
sd_cond_init	include/util.h	/^static inline void sd_cond_init(struct sd_cond *cond)$/;"	f
sd_cond_signal	include/util.h	/^static inline int sd_cond_signal(struct sd_cond *cond)$/;"	f
sd_cond_wait	include/util.h	/^static inline int sd_cond_wait(struct sd_cond *cond, struct sd_mutex *mutex)$/;"	f
sd_cond_wait_timeout	include/util.h	/^static inline int sd_cond_wait_timeout(struct sd_cond *cond,$/;"	f
sd_destroy_cond	include/util.h	/^static inline void sd_destroy_cond(struct sd_cond *cond)$/;"	f
sd_destroy_mutex	include/util.h	/^static inline void sd_destroy_mutex(struct sd_mutex *mutex)$/;"	f
sd_destroy_rw_lock	include/util.h	/^static inline void sd_destroy_rw_lock(struct sd_rw_lock *lock)$/;"	f
sd_init_mutex	include/util.h	/^static inline void sd_init_mutex(struct sd_mutex *mutex)$/;"	f
sd_init_mutex_attr	include/util.h	/^static inline void sd_init_mutex_attr(struct sd_mutex *mutex,$/;"	f
sd_init_rw_lock	include/util.h	/^static inline void sd_init_rw_lock(struct sd_rw_lock *lock)$/;"	f
sd_mutex	include/util.h	/^struct sd_mutex {$/;"	s
sd_mutex_lock	include/util.h	/^static inline void sd_mutex_lock(struct sd_mutex *mutex)$/;"	f
sd_mutex_trylock	include/util.h	/^static inline int sd_mutex_trylock(struct sd_mutex *mutex)$/;"	f
sd_mutex_unlock	include/util.h	/^static inline void sd_mutex_unlock(struct sd_mutex *mutex)$/;"	f
sd_read_lock	include/util.h	/^static inline void sd_read_lock(struct sd_rw_lock *lock)$/;"	f
sd_rw_lock	include/util.h	/^struct sd_rw_lock {$/;"	s
sd_rw_unlock	include/util.h	/^static inline void sd_rw_unlock(struct sd_rw_lock *lock)$/;"	f
sd_thread_create	lib/work.cpp	/^int sd_thread_create(const char *name, sd_thread_t *thread,$/;"	f
sd_thread_create_with_idx	lib/work.cpp	/^int sd_thread_create_with_idx(const char *name, sd_thread_t *thread,$/;"	f
sd_thread_join	lib/work.cpp	/^int sd_thread_join(sd_thread_t thread, void **retval)$/;"	f
sd_thread_t	include/work.h	/^typedef pthread_t sd_thread_t;$/;"	t
sd_write_lock	include/util.h	/^static inline void sd_write_lock(struct sd_rw_lock *lock)$/;"	f
show_idx	lib/work.cpp	/^	bool show_idx;$/;"	m	struct:thread_args	file:
sighandler	server/panda.cpp	/^void sighandler(int signal) {$/;"	f
start_routine	lib/work.cpp	/^	void *(*start_routine)(void *);$/;"	m	struct:thread_args	file:
suspend	lib/work.cpp	/^static void suspend(int num, siginfo_t *info, void *context)$/;"	f	file:
suspend_worker_threads	lib/work.cpp	/^void suspend_worker_threads(void)$/;"	f
tc	lib/work.cpp	/^	enum wq_thread_control tc;$/;"	m	struct:wq_info	typeref:enum:wq_info::wq_thread_control	file:
thread_args	lib/work.cpp	/^struct thread_args {$/;"	s	file:
thread_starter	lib/work.cpp	/^static void *thread_starter(void *arg)$/;"	f	file:
tid_map	lib/work.cpp	/^static unsigned long *tid_map;$/;"	v	file:
tid_map_lock	lib/work.cpp	/^static struct sd_mutex tid_map_lock = SD_MUTEX_INITIALIZER;$/;"	v	typeref:struct:sd_mutex	file:
tid_max	lib/work.cpp	/^static size_t tid_max;$/;"	v	file:
tm_end_of_protection	lib/work.cpp	/^	uint64_t tm_end_of_protection;$/;"	m	struct:wq_info	file:
trace_clear_tid_map	lib/work.cpp	/^static inline void trace_clear_tid_map(int tid) {}$/;"	f	file:
trace_clear_tid_map	lib/work.cpp	/^static void trace_clear_tid_map(int tid)$/;"	f	file:
trace_set_tid_map	lib/work.cpp	/^static inline void trace_set_tid_map(int tid) {}$/;"	f	file:
trace_set_tid_map	lib/work.cpp	/^static void trace_set_tid_map(int tid)$/;"	f	file:
try_to_free_t	include/util.h	/^typedef void (*try_to_free_t)(size_t);$/;"	t
uatomic_bool	include/util.h	/^typedef struct { unsigned long val; } uatomic_bool;$/;"	t	typeref:struct:__anon2
uatomic_is_true	include/util.h	/^static inline bool uatomic_is_true(uatomic_bool *val)$/;"	f
uatomic_set_false	include/util.h	/^static inline void uatomic_set_false(uatomic_bool *val)$/;"	f
uatomic_set_true	include/util.h	/^static inline bool uatomic_set_true(uatomic_bool *val)$/;"	f
uatomic_xchg_ptr	include/util.h	263;"	d
uninitialized_var	include/util.h	57;"	d
unlikely	include/util.h	29;"	d
val	include/util.h	/^	int val;$/;"	m	struct:__anon3
val	include/util.h	/^typedef struct { unsigned long val; } uatomic_bool;$/;"	m	struct:__anon2
w_list	include/work.h	/^	struct list_node w_list;$/;"	m	struct:work	typeref:struct:work::list_node
work	include/work.h	/^struct work {$/;"	s
work_func_t	include/work.h	/^typedef void (*work_func_t)(struct work *);$/;"	t
work_queue	include/work.h	/^struct work_queue {$/;"	s
work_queue_empty	lib/work.cpp	/^bool work_queue_empty(struct work_queue *q)$/;"	f
worker_routine	lib/work.cpp	/^static void *worker_routine(void *arg)$/;"	f	file:
worker_thread_request_done	lib/work.cpp	/^static void worker_thread_request_done(int fd, int events, void *data)$/;"	f	file:
wq_get_nr_nodes	lib/work.cpp	/^static size_t (*wq_get_nr_nodes)(void);$/;"	v	file:
wq_get_roof	lib/work.cpp	/^static inline uint64_t wq_get_roof(struct wq_info *wi)$/;"	f	file:
wq_info	lib/work.cpp	/^struct wq_info {$/;"	s	file:
wq_need_grow	lib/work.cpp	/^static bool wq_need_grow(struct wq_info *wi)$/;"	f	file:
wq_need_shrink	lib/work.cpp	/^static bool wq_need_shrink(struct wq_info *wi)$/;"	f	file:
wq_state	include/work.h	/^	int wq_state;$/;"	m	struct:work_queue
wq_thread_control	include/work.h	/^enum wq_thread_control {$/;"	g
wq_trace_init	lib/work.cpp	/^int wq_trace_init(void) { return 0; }$/;"	f
wq_trace_init	lib/work.cpp	/^int wq_trace_init(void)$/;"	f
write_cb	client/panda_client.cpp	/^void write_cb(struct bufferevent* bev, void* ctx) {$/;"	f
write_cb	server/panda.cpp	/^void write_cb(struct bufferevent *bev, void *ctx) {$/;"	f
xbsearch	include/util.h	163;"	d
xlfind	include/util.h	200;"	d
xlremove	include/util.h	219;"	d
xqsort	include/util.h	153;"	d
zalloc	include/util.h	/^static inline void *zalloc(size_t size)$/;"	f
~Arena	lib/arena.cc	/^Arena::~Arena() {$/;"	f	class:Ucloud::Arena
~Config	server/config.cpp	/^Config::~Config() {$/;"	f	class:Config
~INIReader	lib/INIReader.cpp	/^INIReader::~INIReader()$/;"	f	class:INIReader
~MemAllocator	lib/memory.cc	/^MemAllocator::~MemAllocator() {$/;"	f	class:MemAllocator
